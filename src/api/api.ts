/* tslint:disable */
/* eslint-disable */
/**
 * Waiting List Api
 * Ambulance Waiting List management for Web-In-Cloud system
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: aa@bb.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface Ambulance
 */
export interface Ambulance {
    /**
     * Unique identifier of the ambulance
     * @type {string}
     * @memberof Ambulance
     */
    'id': string;
    /**
     * Human readable display name of the ambulance
     * @type {string}
     * @memberof Ambulance
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof Ambulance
     */
    'roomNumber': string;
    /**
     * 
     * @type {Array<WaitingListEntry>}
     * @memberof Ambulance
     */
    'waitingList'?: Array<WaitingListEntry>;
    /**
     * 
     * @type {Array<Condition>}
     * @memberof Ambulance
     */
    'predefinedConditions'?: Array<Condition>;
}
/**
 * Describes disease, symptoms, or other reasons of patient visit
 * @export
 * @interface Condition
 */
export interface Condition {
    /**
     * 
     * @type {string}
     * @memberof Condition
     */
    'value': string;
    /**
     * 
     * @type {string}
     * @memberof Condition
     */
    'code'?: string;
    /**
     * Link to encyclopedical explanation of the patient\'s condition
     * @type {string}
     * @memberof Condition
     */
    'reference'?: string;
    /**
     * 
     * @type {number}
     * @memberof Condition
     */
    'typicalDurationMinutes'?: number;
}
/**
 * 
 * @export
 * @interface WaitingListEntry
 */
export interface WaitingListEntry {
    /**
     * Unique id of the entry in this waiting list
     * @type {string}
     * @memberof WaitingListEntry
     */
    'id': string;
    /**
     * Name of patient in waiting list
     * @type {string}
     * @memberof WaitingListEntry
     */
    'name'?: string;
    /**
     * Unique identifier of the patient known to Web-In-Cloud system
     * @type {string}
     * @memberof WaitingListEntry
     */
    'patientId': string;
    /**
     * Timestamp since when the patient entered the waiting list
     * @type {string}
     * @memberof WaitingListEntry
     */
    'waitingSince': string;
    /**
     * Estimated time of entering ambulance. Ignored on post.
     * @type {string}
     * @memberof WaitingListEntry
     */
    'estimatedStart'?: string;
    /**
     * Estimated duration of ambulance visit. If not provided then it will be computed based on condition and ambulance settings
     * @type {number}
     * @memberof WaitingListEntry
     */
    'estimatedDurationMinutes': number;
    /**
     * 
     * @type {Condition}
     * @memberof WaitingListEntry
     */
    'condition'?: Condition;
}

/**
 * AmbulanceAdminsApi - axios parameter creator
 * @export
 */
export const AmbulanceAdminsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Stores new ambulance.
         * @summary Creates new ambulance
         * @param {string} ambulanceId pass the ambulanceId of the particular ambulance
         * @param {Ambulance} ambulance Ambulance template
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAmbulanceDetails: async (ambulanceId: string, ambulance: Ambulance, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ambulanceId' is not null or undefined
            assertParamExists('createAmbulanceDetails', 'ambulanceId', ambulanceId)
            // verify required parameter 'ambulance' is not null or undefined
            assertParamExists('createAmbulanceDetails', 'ambulance', ambulance)
            const localVarPath = `/waiting-list/{ambulanceId}`
                .replace(`{${"ambulanceId"}}`, encodeURIComponent(String(ambulanceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(ambulance, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this method to delete the specific condition from the list of associated predefined conditions for this ambulance
         * @summary Deletes specific associated condition
         * @param {string} ambulanceId pass the id of the particular ambulance
         * @param {string} conditionCode pass the code of the particular condition
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCondition: async (ambulanceId: string, conditionCode: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ambulanceId' is not null or undefined
            assertParamExists('deleteCondition', 'ambulanceId', ambulanceId)
            // verify required parameter 'conditionCode' is not null or undefined
            assertParamExists('deleteCondition', 'conditionCode', conditionCode)
            const localVarPath = `/waiting-list/{ambulanceId}/condition/{conditionCode}`
                .replace(`{${"ambulanceId"}}`, encodeURIComponent(String(ambulanceId)))
                .replace(`{${"conditionCode"}}`, encodeURIComponent(String(conditionCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this method to associate new predefined condition with the ambulance
         * @summary Saves new predefined condition
         * @param {string} ambulanceId pass the id of the particular ambulance
         * @param {Condition} condition Associated condition
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        storeCondition: async (ambulanceId: string, condition: Condition, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ambulanceId' is not null or undefined
            assertParamExists('storeCondition', 'ambulanceId', ambulanceId)
            // verify required parameter 'condition' is not null or undefined
            assertParamExists('storeCondition', 'condition', condition)
            const localVarPath = `/waiting-list/{ambulanceId}/condition`
                .replace(`{${"ambulanceId"}}`, encodeURIComponent(String(ambulanceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(condition, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AmbulanceAdminsApi - functional programming interface
 * @export
 */
export const AmbulanceAdminsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AmbulanceAdminsApiAxiosParamCreator(configuration)
    return {
        /**
         * Stores new ambulance.
         * @summary Creates new ambulance
         * @param {string} ambulanceId pass the ambulanceId of the particular ambulance
         * @param {Ambulance} ambulance Ambulance template
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createAmbulanceDetails(ambulanceId: string, ambulance: Ambulance, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createAmbulanceDetails(ambulanceId, ambulance, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Use this method to delete the specific condition from the list of associated predefined conditions for this ambulance
         * @summary Deletes specific associated condition
         * @param {string} ambulanceId pass the id of the particular ambulance
         * @param {string} conditionCode pass the code of the particular condition
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteCondition(ambulanceId: string, conditionCode: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteCondition(ambulanceId, conditionCode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Use this method to associate new predefined condition with the ambulance
         * @summary Saves new predefined condition
         * @param {string} ambulanceId pass the id of the particular ambulance
         * @param {Condition} condition Associated condition
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async storeCondition(ambulanceId: string, condition: Condition, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.storeCondition(ambulanceId, condition, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AmbulanceAdminsApi - factory interface
 * @export
 */
export const AmbulanceAdminsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AmbulanceAdminsApiFp(configuration)
    return {
        /**
         * Stores new ambulance.
         * @summary Creates new ambulance
         * @param {string} ambulanceId pass the ambulanceId of the particular ambulance
         * @param {Ambulance} ambulance Ambulance template
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAmbulanceDetails(ambulanceId: string, ambulance: Ambulance, options?: any): AxiosPromise<void> {
            return localVarFp.createAmbulanceDetails(ambulanceId, ambulance, options).then((request) => request(axios, basePath));
        },
        /**
         * Use this method to delete the specific condition from the list of associated predefined conditions for this ambulance
         * @summary Deletes specific associated condition
         * @param {string} ambulanceId pass the id of the particular ambulance
         * @param {string} conditionCode pass the code of the particular condition
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCondition(ambulanceId: string, conditionCode: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteCondition(ambulanceId, conditionCode, options).then((request) => request(axios, basePath));
        },
        /**
         * Use this method to associate new predefined condition with the ambulance
         * @summary Saves new predefined condition
         * @param {string} ambulanceId pass the id of the particular ambulance
         * @param {Condition} condition Associated condition
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        storeCondition(ambulanceId: string, condition: Condition, options?: any): AxiosPromise<void> {
            return localVarFp.storeCondition(ambulanceId, condition, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AmbulanceAdminsApi - object-oriented interface
 * @export
 * @class AmbulanceAdminsApi
 * @extends {BaseAPI}
 */
export class AmbulanceAdminsApi extends BaseAPI {
    /**
     * Stores new ambulance.
     * @summary Creates new ambulance
     * @param {string} ambulanceId pass the ambulanceId of the particular ambulance
     * @param {Ambulance} ambulance Ambulance template
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AmbulanceAdminsApi
     */
    public createAmbulanceDetails(ambulanceId: string, ambulance: Ambulance, options?: AxiosRequestConfig) {
        return AmbulanceAdminsApiFp(this.configuration).createAmbulanceDetails(ambulanceId, ambulance, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Use this method to delete the specific condition from the list of associated predefined conditions for this ambulance
     * @summary Deletes specific associated condition
     * @param {string} ambulanceId pass the id of the particular ambulance
     * @param {string} conditionCode pass the code of the particular condition
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AmbulanceAdminsApi
     */
    public deleteCondition(ambulanceId: string, conditionCode: string, options?: AxiosRequestConfig) {
        return AmbulanceAdminsApiFp(this.configuration).deleteCondition(ambulanceId, conditionCode, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Use this method to associate new predefined condition with the ambulance
     * @summary Saves new predefined condition
     * @param {string} ambulanceId pass the id of the particular ambulance
     * @param {Condition} condition Associated condition
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AmbulanceAdminsApi
     */
    public storeCondition(ambulanceId: string, condition: Condition, options?: AxiosRequestConfig) {
        return AmbulanceAdminsApiFp(this.configuration).storeCondition(ambulanceId, condition, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * AmbulanceDevelopersApi - axios parameter creator
 * @export
 */
export const AmbulanceDevelopersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Use this method to delete the specific entry from the waiting list.
         * @summary Deletes specific entry
         * @param {string} ambulanceId pass the id of the particular ambulance
         * @param {string} entryId pass the id of the particular entry in the waiting list
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteWaitingListEntry: async (ambulanceId: string, entryId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ambulanceId' is not null or undefined
            assertParamExists('deleteWaitingListEntry', 'ambulanceId', ambulanceId)
            // verify required parameter 'entryId' is not null or undefined
            assertParamExists('deleteWaitingListEntry', 'entryId', entryId)
            const localVarPath = `/waiting-list/{ambulanceId}/entry/{entryId}`
                .replace(`{${"ambulanceId"}}`, encodeURIComponent(String(ambulanceId)))
                .replace(`{${"entryId"}}`, encodeURIComponent(String(entryId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * By using ambulanceId you can retrieve waiting list of that particular ambulance. 
         * @summary Provides waiting list of the ambulance
         * @param {string} ambulanceId pass the ambulanceId of the particular ambulance
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAmbulanceDetails: async (ambulanceId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ambulanceId' is not null or undefined
            assertParamExists('getAmbulanceDetails', 'ambulanceId', ambulanceId)
            const localVarPath = `/waiting-list/{ambulanceId}`
                .replace(`{${"ambulanceId"}}`, encodeURIComponent(String(ambulanceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * By using ambulanceId and conditionCode you can get details of associated predefined condition.
         * @summary Provides details about given condition
         * @param {string} ambulanceId pass the id of the particular ambulance
         * @param {string} conditionCode pass the code of the particular condition
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCondition: async (ambulanceId: string, conditionCode: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ambulanceId' is not null or undefined
            assertParamExists('getCondition', 'ambulanceId', ambulanceId)
            // verify required parameter 'conditionCode' is not null or undefined
            assertParamExists('getCondition', 'conditionCode', conditionCode)
            const localVarPath = `/waiting-list/{ambulanceId}/condition/{conditionCode}`
                .replace(`{${"ambulanceId"}}`, encodeURIComponent(String(ambulanceId)))
                .replace(`{${"conditionCode"}}`, encodeURIComponent(String(conditionCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * By using ambulanceId you get list of predefined conditions
         * @summary Provides the list of conditions associated with ambulance
         * @param {string} ambulanceId pass the id of the particular ambulance
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConditions: async (ambulanceId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ambulanceId' is not null or undefined
            assertParamExists('getConditions', 'ambulanceId', ambulanceId)
            const localVarPath = `/waiting-list/{ambulanceId}/condition`
                .replace(`{${"ambulanceId"}}`, encodeURIComponent(String(ambulanceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * By using ambulanceId you get list of entries in ambulance witing list
         * @summary Provides the ambulance waiting list
         * @param {string} ambulanceId pass the id of the particular ambulance
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWaitingListEntries: async (ambulanceId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ambulanceId' is not null or undefined
            assertParamExists('getWaitingListEntries', 'ambulanceId', ambulanceId)
            const localVarPath = `/waiting-list/{ambulanceId}/entries`
                .replace(`{${"ambulanceId"}}`, encodeURIComponent(String(ambulanceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * By using ambulanceId and entryId you can details of particular entry item ambulance.
         * @summary Provides details about waiting list entry
         * @param {string} ambulanceId pass the id of the particular ambulance
         * @param {string} entryId pass the id of the particular entry in the waiting list
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWaitingListEntry: async (ambulanceId: string, entryId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ambulanceId' is not null or undefined
            assertParamExists('getWaitingListEntry', 'ambulanceId', ambulanceId)
            // verify required parameter 'entryId' is not null or undefined
            assertParamExists('getWaitingListEntry', 'entryId', entryId)
            const localVarPath = `/waiting-list/{ambulanceId}/entry/{entryId}`
                .replace(`{${"ambulanceId"}}`, encodeURIComponent(String(ambulanceId)))
                .replace(`{${"entryId"}}`, encodeURIComponent(String(entryId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this method to store new entry into the waiting list.
         * @summary Saves new entry into waiting list
         * @param {string} ambulanceId pass the id of the particular ambulance
         * @param {WaitingListEntry} waitingListEntry Waiting list entry to store
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        storeWaitingListEntry: async (ambulanceId: string, waitingListEntry: WaitingListEntry, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ambulanceId' is not null or undefined
            assertParamExists('storeWaitingListEntry', 'ambulanceId', ambulanceId)
            // verify required parameter 'waitingListEntry' is not null or undefined
            assertParamExists('storeWaitingListEntry', 'waitingListEntry', waitingListEntry)
            const localVarPath = `/waiting-list/{ambulanceId}/entry`
                .replace(`{${"ambulanceId"}}`, encodeURIComponent(String(ambulanceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(waitingListEntry, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this method to update content of the associated predefined condition.
         * @summary Updates specific condition
         * @param {string} ambulanceId pass the id of the particular ambulance
         * @param {string} conditionCode pass the code of the particular condition
         * @param {Condition} condition Condition to update
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCondition: async (ambulanceId: string, conditionCode: string, condition: Condition, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ambulanceId' is not null or undefined
            assertParamExists('updateCondition', 'ambulanceId', ambulanceId)
            // verify required parameter 'conditionCode' is not null or undefined
            assertParamExists('updateCondition', 'conditionCode', conditionCode)
            // verify required parameter 'condition' is not null or undefined
            assertParamExists('updateCondition', 'condition', condition)
            const localVarPath = `/waiting-list/{ambulanceId}/condition/{conditionCode}`
                .replace(`{${"ambulanceId"}}`, encodeURIComponent(String(ambulanceId)))
                .replace(`{${"conditionCode"}}`, encodeURIComponent(String(conditionCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(condition, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this method to update content of the waiting list entry.
         * @summary Updates specific entry
         * @param {string} ambulanceId pass the id of the particular ambulance
         * @param {string} entryId pass the id of the particular entry in the waiting list
         * @param {WaitingListEntry} waitingListEntry Waiting list entry to update
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateWaitingListEntry: async (ambulanceId: string, entryId: string, waitingListEntry: WaitingListEntry, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ambulanceId' is not null or undefined
            assertParamExists('updateWaitingListEntry', 'ambulanceId', ambulanceId)
            // verify required parameter 'entryId' is not null or undefined
            assertParamExists('updateWaitingListEntry', 'entryId', entryId)
            // verify required parameter 'waitingListEntry' is not null or undefined
            assertParamExists('updateWaitingListEntry', 'waitingListEntry', waitingListEntry)
            const localVarPath = `/waiting-list/{ambulanceId}/entry/{entryId}`
                .replace(`{${"ambulanceId"}}`, encodeURIComponent(String(ambulanceId)))
                .replace(`{${"entryId"}}`, encodeURIComponent(String(entryId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(waitingListEntry, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AmbulanceDevelopersApi - functional programming interface
 * @export
 */
export const AmbulanceDevelopersApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AmbulanceDevelopersApiAxiosParamCreator(configuration)
    return {
        /**
         * Use this method to delete the specific entry from the waiting list.
         * @summary Deletes specific entry
         * @param {string} ambulanceId pass the id of the particular ambulance
         * @param {string} entryId pass the id of the particular entry in the waiting list
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteWaitingListEntry(ambulanceId: string, entryId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteWaitingListEntry(ambulanceId, entryId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * By using ambulanceId you can retrieve waiting list of that particular ambulance. 
         * @summary Provides waiting list of the ambulance
         * @param {string} ambulanceId pass the ambulanceId of the particular ambulance
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAmbulanceDetails(ambulanceId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Ambulance>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAmbulanceDetails(ambulanceId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * By using ambulanceId and conditionCode you can get details of associated predefined condition.
         * @summary Provides details about given condition
         * @param {string} ambulanceId pass the id of the particular ambulance
         * @param {string} conditionCode pass the code of the particular condition
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCondition(ambulanceId: string, conditionCode: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Condition>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCondition(ambulanceId, conditionCode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * By using ambulanceId you get list of predefined conditions
         * @summary Provides the list of conditions associated with ambulance
         * @param {string} ambulanceId pass the id of the particular ambulance
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getConditions(ambulanceId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Condition>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getConditions(ambulanceId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * By using ambulanceId you get list of entries in ambulance witing list
         * @summary Provides the ambulance waiting list
         * @param {string} ambulanceId pass the id of the particular ambulance
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getWaitingListEntries(ambulanceId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<WaitingListEntry>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getWaitingListEntries(ambulanceId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * By using ambulanceId and entryId you can details of particular entry item ambulance.
         * @summary Provides details about waiting list entry
         * @param {string} ambulanceId pass the id of the particular ambulance
         * @param {string} entryId pass the id of the particular entry in the waiting list
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getWaitingListEntry(ambulanceId: string, entryId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WaitingListEntry>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getWaitingListEntry(ambulanceId, entryId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Use this method to store new entry into the waiting list.
         * @summary Saves new entry into waiting list
         * @param {string} ambulanceId pass the id of the particular ambulance
         * @param {WaitingListEntry} waitingListEntry Waiting list entry to store
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async storeWaitingListEntry(ambulanceId: string, waitingListEntry: WaitingListEntry, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WaitingListEntry>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.storeWaitingListEntry(ambulanceId, waitingListEntry, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Use this method to update content of the associated predefined condition.
         * @summary Updates specific condition
         * @param {string} ambulanceId pass the id of the particular ambulance
         * @param {string} conditionCode pass the code of the particular condition
         * @param {Condition} condition Condition to update
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateCondition(ambulanceId: string, conditionCode: string, condition: Condition, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateCondition(ambulanceId, conditionCode, condition, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Use this method to update content of the waiting list entry.
         * @summary Updates specific entry
         * @param {string} ambulanceId pass the id of the particular ambulance
         * @param {string} entryId pass the id of the particular entry in the waiting list
         * @param {WaitingListEntry} waitingListEntry Waiting list entry to update
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateWaitingListEntry(ambulanceId: string, entryId: string, waitingListEntry: WaitingListEntry, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WaitingListEntry>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateWaitingListEntry(ambulanceId, entryId, waitingListEntry, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AmbulanceDevelopersApi - factory interface
 * @export
 */
export const AmbulanceDevelopersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AmbulanceDevelopersApiFp(configuration)
    return {
        /**
         * Use this method to delete the specific entry from the waiting list.
         * @summary Deletes specific entry
         * @param {string} ambulanceId pass the id of the particular ambulance
         * @param {string} entryId pass the id of the particular entry in the waiting list
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteWaitingListEntry(ambulanceId: string, entryId: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteWaitingListEntry(ambulanceId, entryId, options).then((request) => request(axios, basePath));
        },
        /**
         * By using ambulanceId you can retrieve waiting list of that particular ambulance. 
         * @summary Provides waiting list of the ambulance
         * @param {string} ambulanceId pass the ambulanceId of the particular ambulance
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAmbulanceDetails(ambulanceId: string, options?: any): AxiosPromise<Ambulance> {
            return localVarFp.getAmbulanceDetails(ambulanceId, options).then((request) => request(axios, basePath));
        },
        /**
         * By using ambulanceId and conditionCode you can get details of associated predefined condition.
         * @summary Provides details about given condition
         * @param {string} ambulanceId pass the id of the particular ambulance
         * @param {string} conditionCode pass the code of the particular condition
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCondition(ambulanceId: string, conditionCode: string, options?: any): AxiosPromise<Condition> {
            return localVarFp.getCondition(ambulanceId, conditionCode, options).then((request) => request(axios, basePath));
        },
        /**
         * By using ambulanceId you get list of predefined conditions
         * @summary Provides the list of conditions associated with ambulance
         * @param {string} ambulanceId pass the id of the particular ambulance
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConditions(ambulanceId: string, options?: any): AxiosPromise<Array<Condition>> {
            return localVarFp.getConditions(ambulanceId, options).then((request) => request(axios, basePath));
        },
        /**
         * By using ambulanceId you get list of entries in ambulance witing list
         * @summary Provides the ambulance waiting list
         * @param {string} ambulanceId pass the id of the particular ambulance
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWaitingListEntries(ambulanceId: string, options?: any): AxiosPromise<Array<WaitingListEntry>> {
            return localVarFp.getWaitingListEntries(ambulanceId, options).then((request) => request(axios, basePath));
        },
        /**
         * By using ambulanceId and entryId you can details of particular entry item ambulance.
         * @summary Provides details about waiting list entry
         * @param {string} ambulanceId pass the id of the particular ambulance
         * @param {string} entryId pass the id of the particular entry in the waiting list
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWaitingListEntry(ambulanceId: string, entryId: string, options?: any): AxiosPromise<WaitingListEntry> {
            return localVarFp.getWaitingListEntry(ambulanceId, entryId, options).then((request) => request(axios, basePath));
        },
        /**
         * Use this method to store new entry into the waiting list.
         * @summary Saves new entry into waiting list
         * @param {string} ambulanceId pass the id of the particular ambulance
         * @param {WaitingListEntry} waitingListEntry Waiting list entry to store
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        storeWaitingListEntry(ambulanceId: string, waitingListEntry: WaitingListEntry, options?: any): AxiosPromise<WaitingListEntry> {
            return localVarFp.storeWaitingListEntry(ambulanceId, waitingListEntry, options).then((request) => request(axios, basePath));
        },
        /**
         * Use this method to update content of the associated predefined condition.
         * @summary Updates specific condition
         * @param {string} ambulanceId pass the id of the particular ambulance
         * @param {string} conditionCode pass the code of the particular condition
         * @param {Condition} condition Condition to update
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCondition(ambulanceId: string, conditionCode: string, condition: Condition, options?: any): AxiosPromise<void> {
            return localVarFp.updateCondition(ambulanceId, conditionCode, condition, options).then((request) => request(axios, basePath));
        },
        /**
         * Use this method to update content of the waiting list entry.
         * @summary Updates specific entry
         * @param {string} ambulanceId pass the id of the particular ambulance
         * @param {string} entryId pass the id of the particular entry in the waiting list
         * @param {WaitingListEntry} waitingListEntry Waiting list entry to update
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateWaitingListEntry(ambulanceId: string, entryId: string, waitingListEntry: WaitingListEntry, options?: any): AxiosPromise<WaitingListEntry> {
            return localVarFp.updateWaitingListEntry(ambulanceId, entryId, waitingListEntry, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AmbulanceDevelopersApi - object-oriented interface
 * @export
 * @class AmbulanceDevelopersApi
 * @extends {BaseAPI}
 */
export class AmbulanceDevelopersApi extends BaseAPI {
    /**
     * Use this method to delete the specific entry from the waiting list.
     * @summary Deletes specific entry
     * @param {string} ambulanceId pass the id of the particular ambulance
     * @param {string} entryId pass the id of the particular entry in the waiting list
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AmbulanceDevelopersApi
     */
    public deleteWaitingListEntry(ambulanceId: string, entryId: string, options?: AxiosRequestConfig) {
        return AmbulanceDevelopersApiFp(this.configuration).deleteWaitingListEntry(ambulanceId, entryId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * By using ambulanceId you can retrieve waiting list of that particular ambulance. 
     * @summary Provides waiting list of the ambulance
     * @param {string} ambulanceId pass the ambulanceId of the particular ambulance
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AmbulanceDevelopersApi
     */
    public getAmbulanceDetails(ambulanceId: string, options?: AxiosRequestConfig) {
        return AmbulanceDevelopersApiFp(this.configuration).getAmbulanceDetails(ambulanceId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * By using ambulanceId and conditionCode you can get details of associated predefined condition.
     * @summary Provides details about given condition
     * @param {string} ambulanceId pass the id of the particular ambulance
     * @param {string} conditionCode pass the code of the particular condition
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AmbulanceDevelopersApi
     */
    public getCondition(ambulanceId: string, conditionCode: string, options?: AxiosRequestConfig) {
        return AmbulanceDevelopersApiFp(this.configuration).getCondition(ambulanceId, conditionCode, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * By using ambulanceId you get list of predefined conditions
     * @summary Provides the list of conditions associated with ambulance
     * @param {string} ambulanceId pass the id of the particular ambulance
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AmbulanceDevelopersApi
     */
    public getConditions(ambulanceId: string, options?: AxiosRequestConfig) {
        return AmbulanceDevelopersApiFp(this.configuration).getConditions(ambulanceId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * By using ambulanceId you get list of entries in ambulance witing list
     * @summary Provides the ambulance waiting list
     * @param {string} ambulanceId pass the id of the particular ambulance
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AmbulanceDevelopersApi
     */
    public getWaitingListEntries(ambulanceId: string, options?: AxiosRequestConfig) {
        return AmbulanceDevelopersApiFp(this.configuration).getWaitingListEntries(ambulanceId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * By using ambulanceId and entryId you can details of particular entry item ambulance.
     * @summary Provides details about waiting list entry
     * @param {string} ambulanceId pass the id of the particular ambulance
     * @param {string} entryId pass the id of the particular entry in the waiting list
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AmbulanceDevelopersApi
     */
    public getWaitingListEntry(ambulanceId: string, entryId: string, options?: AxiosRequestConfig) {
        return AmbulanceDevelopersApiFp(this.configuration).getWaitingListEntry(ambulanceId, entryId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Use this method to store new entry into the waiting list.
     * @summary Saves new entry into waiting list
     * @param {string} ambulanceId pass the id of the particular ambulance
     * @param {WaitingListEntry} waitingListEntry Waiting list entry to store
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AmbulanceDevelopersApi
     */
    public storeWaitingListEntry(ambulanceId: string, waitingListEntry: WaitingListEntry, options?: AxiosRequestConfig) {
        return AmbulanceDevelopersApiFp(this.configuration).storeWaitingListEntry(ambulanceId, waitingListEntry, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Use this method to update content of the associated predefined condition.
     * @summary Updates specific condition
     * @param {string} ambulanceId pass the id of the particular ambulance
     * @param {string} conditionCode pass the code of the particular condition
     * @param {Condition} condition Condition to update
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AmbulanceDevelopersApi
     */
    public updateCondition(ambulanceId: string, conditionCode: string, condition: Condition, options?: AxiosRequestConfig) {
        return AmbulanceDevelopersApiFp(this.configuration).updateCondition(ambulanceId, conditionCode, condition, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Use this method to update content of the waiting list entry.
     * @summary Updates specific entry
     * @param {string} ambulanceId pass the id of the particular ambulance
     * @param {string} entryId pass the id of the particular entry in the waiting list
     * @param {WaitingListEntry} waitingListEntry Waiting list entry to update
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AmbulanceDevelopersApi
     */
    public updateWaitingListEntry(ambulanceId: string, entryId: string, waitingListEntry: WaitingListEntry, options?: AxiosRequestConfig) {
        return AmbulanceDevelopersApiFp(this.configuration).updateWaitingListEntry(ambulanceId, entryId, waitingListEntry, options).then((request) => request(this.axios, this.basePath));
    }
}


